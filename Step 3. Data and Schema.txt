API Choice
For this project, I chose to use TheMealDB API, a free and public RESTful API that returns data in JSON format. It provides detailed meal information including ingredients, instructions, categories, and meal images.

API Familiarization & Data Processing
The API data is structured in a flat JSON format.

Useful fields included: meal name, meal ID, ingredients (up to 20), image URL, instructions, category, and YouTube link.

Some data cleanup was required, especially for the ingredients, which are split into separate strIngredient1, strIngredient2, etc. I wrote a helper function to extract and combine those fields into a usable list.

Data Usage
While the API contains extensive metadata (e.g., region, tags, YouTube videos), I only retained data relevant to searching, saving, and displaying meals. Extra fields were discarded to avoid unnecessary storage and complexity.

Database Schema
Since the data comes from an external API and users can save meals to their profiles, I created a PostgreSQL database with the following structure:

Entities:
User
Stores user account info (registration, login, profile info).

Favorite
A many-to-many relationship between User and Meal. This table stores saved meals.

Meal
Stores relevant data from the MealDB API. Meals are cached locally for performance.

Relationships:
A User can have many Favorites.

A Meal can be saved by many Users.

Favorite links User and Meal using foreign keys.

ERD (Entity Relationship Diagram)
Here’s the structure using crow’s foot notation:

diff
Copy
Edit
User
- id (PK)
- username
- password
- description

Meal
- id (PK)
- meal_name
- meal_image
- instructions
- category

Favorite
- id (PK)
- user_id (FK → User.id)
- meal_id (FK → Meal.id)
